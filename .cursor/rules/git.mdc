---
description: 
globs: 
alwaysApply: true
---
# Git 運用ルール

このドキュメントは、プロジェクトにおける Git の運用ルールをまとめた指示ファイルです。

## 1. Issue テンプレート

### 概要
- ユーザーがメールリンク／OAuthでログインできるようにする

### 受け入れ条件
1. メールリンク送信APIが正常に動作すること
2. サインイン後、TOPページにリダイレクトされること

### 変更箇所候補
- `src/lib/auth.ts`
- `src/pages/login.tsx`

### 実装例
```ts
await supabase.auth.signInWithOtp({ email });
```

## 2. PR テンプレート

```markdown
<!-- Pull Request #<Issue番号> feat: ユーザーがログインできる -->

## 概要
- Issue #<Issue番号> の実装

## 変更内容
- 追加: `src/pages/login.tsx`
- 更新: `src/lib/auth.ts`

## テスト手順
1. `npm run dev` を実行
2. /login にアクセスしメールリンクでログイン

## 関連Issue
- resolves #<Issue番号>
```

## 3. コミットメッセージ規約

```
<type>(<scope>): <短い要約>

<body>         # 任意: 詳細説明

<footer>       # 任意: Closes #<Issue番号>
```

- **type**: feat, fix, docs, style, refactor, perf, test, chore
- **scope**: component, page, api, util など
- **footer**: `Closes #<Issue番号>` を記載

## 4. Git ワークフロー

このドキュメントでは、コミットとプルリクエストの作成に関するベストプラクティスを説明します。

### 4.1 コミットの作成

コミットを作成する際は、以下の手順に従います：

1. 変更の確認

```sh
# 未追跡ファイルと変更の確認
git status
# 変更内容の詳細確認
git diff
# コミットメッセージのスタイル確認
git log
```

2. 変更の分析

- 変更または追加されたファイルの特定
- 変更の性質（新機能、バグ修正、リファクタリングなど）の把握
- プロジェクトへの影響評価
- 機密情報の有無確認

3. コミットメッセージの作成

- 「なぜ」に焦点を当てる
- 明確で簡潔な言葉を使用
- 変更の目的を正確に反映
- 一般的な表現を避ける

4. コミットの実行

```sh
# 関連ファイルのみをステージング
git add <files>
# コミットメッセージの作成（HEREDOCを使用）
git commit -m "$(cat <<'EOF'
feat: ユーザー認証にResult型を導入

- エラー処理をより型安全に
- エラーケースの明示的な処理を強制
- テストの改善

Co-Authored-By: Claude <noreply@anthropic.com>
EOF
)"
```

### 4.2 プルリクエストの作成

プルリクエストを作成する際は、以下の手順に従います：

1. ブランチの状態確認

```sh
# 未コミットの変更確認
git status
# 変更内容の確認
git diff
# mainからの差分確認
git diff main...HEAD
# コミット履歴の確認
git log
```

2. 変更の分析

- mainから分岐後のすべてのコミットの確認
- 変更の性質と目的の把握
- プロジェクトへの影響評価
- 機密情報の有無確認

3. プルリクエストの作成

```sh
# GitHub CLI を利用した PR 作成 (HEREDOC)
gh pr create --title "feat: Result型によるエラー処理の改善" --body "$(cat <<'EOF'
## 概要

エラー処理をより型安全にするため、Result型を導入しました。

## 変更内容
- neverthrowを使用したResult型の導入
- エラーケースの明示的な型定義
- テストケースの追加

## レビューのポイント
- Result型の使用方法が適切か
- エラーケースの網羅性
- テストの十分性
EOF
)"
```

### 4.3 重要な注意事項

1. コミット関連
   - 可能な場合は `git commit -am` を使用
   - 関係ないファイルは含めない
   - 空のコミットは作成しない
   - git設定は変更しない

2. プルリクエスト関連
   - 必要に応じて新しいブランチを作成
   - 変更を適切にコミット
   - リモートへのプッシュは `-u` フラグを使用
   - すべての変更を分析

3. 避けるべき操作
   - 対話的な git コマンド（-i フラグ）の使用
   - リモートリポジトリへの直接プッシュ
   - git 設定の変更

### 4.4 コミットメッセージの例

```text
# 新機能の追加
feat: Result型によるエラー処理の導入

# 既存機能の改善
update: キャッシュ機能のパフォーマンス改善

# バグ修正
fix: 認証トークンの期限切れ処理を修正

# リファクタリング
refactor: Adapterパターンを使用して外部依存を抽象化

# テスト追加
test: Result型のエラーケースのテストを追加

# ドキュメント更新
docs: エラー処理のベストプラクティスを追加
```

### 4.5 プルリクエストの例

```markdown
## 概要

TypeScriptのエラー処理をより型安全にするため、Result型を導入しました。

## 変更内容
- neverthrowライブラリの導入
- APIクライアントでのResult型の使用
- エラーケースの型定義
- テストケースの追加

## 技術的な詳細
- 既存の例外処理をResult型に置き換え
- エラー型の共通化
- モック実装の改善

## レビューのポイント
- Result型の使用方法が適切か
- エラーケースの網羅性
- テストの十分性
```


