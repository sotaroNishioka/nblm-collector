---
description: 
globs: 
alwaysApply: true
---
# 重要

ユーザーはあなたよりプログラミングが得意ですが、時短のためにコーディングを依頼しています。
2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

私は GitHubから学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザーに説明しながらコードを書きます。
反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

このプロジェクトは@https://github.com/sotaroNishioka/nblm-collectorで管理されています。

できるかぎりMCPサーバーから提供されている機能群を利用して作業を行ってください。

# 作業フロー
作業を開始する場合は、以下の手順に従って作業を進めます。
ユーザーはgithubのissueを指定して作業を依頼します。
issueが指定されていない場合はどのissueにひもづいた作業か確認してください。
無視するように言われた場合は、そのまま続行します。


## 1 gitコンテキストの確認
`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。
無視するように言われた場合は、そのまま続行します。

## 2 作業内容に紐づいたブランチの作成

```sh
# mainブランチが最新であることを確認
git checkout main
git pull origin main

# Issueに紐づいたブランチを作成
# ブランチ名の形式: issue-{issue番号}-{簡潔な説明}
git checkout -b issue-42-auth-result-type

# ブランチが作成されたことを確認
git branch
```

## 3 作業とコミット

```sh
# 変更を加える（コードの修正、追加など）
# ...

# 変更をステージングとコミット
git add .
git commit -m "feat(auth): Result型を使った認証エラー処理の実装

- neverthrowライブラリを導入
- APIレスポンスをResult型でラップ
- エラーケースを型安全に処理

Closes #42"

# 必要に応じて複数のコミットに分割
```

## 4 リモートへのプッシュとPRの作成

```sh
# 作業ブランチをリモートにプッシュ
git push -u origin issue-42-auth-result-type

# GitHub CLIを使用してPRを作成
gh pr create --title "feat(auth): Result型を使った認証エラー処理の実装" --body "## 概要
Issue #42 の実装として、認証処理にResult型を導入しました。

## 変更内容
- neverthrowライブラリの導入
- 認証エラーの型定義を強化
- APIレスポンスの型安全な処理
- テストケースの追加

## テスト手順
1. \`npm test\` でテストが通ることを確認
2. ログイン失敗時のエラーハンドリングが適切に動作することを確認

Closes #42"
```

## 5 レビューとマージ

1. PRに対するレビューを依頼
2. レビューコメントに対応し、必要に応じて追加の変更をコミット
3. すべてのレビューが承認されたらマージ
4. マージ後、ローカルの作業ブランチを削除

```sh
# mainブランチに戻る
git checkout main

# リモートの変更を取得
git pull origin main

# 作業ブランチを削除
git branch -d issue-42-auth-result-type
```

### 5 プルリクエスト作成のポイント

- タイトルには変更の種類（feat, fix など）を含める
- 本文には必ず関連するIssue番号を記載（`Closes #42` など）
- スクリーンショットや動作確認方法を含めるとレビューがスムーズに
- CIの結果を確認し、テストが通過することを確認
- コードオーナーや関連する機能の担当者をレビュアーに指定

以上の手順に従うことで、Issueからブランチ作成、変更の実装、PRの作成までの一連のフローをスムーズに進めることができます。
